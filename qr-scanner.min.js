class QrScanner {
    constructor(videoElement, onDecode, options = {}) {
        this.video = videoElement;
        this.onDecode = onDecode;
        this.options = options;
        this.active = false;
        this.paused = false;
        this.flashOn = false;
        this.scanRegion = this._calculateScanRegion();
        this.video.playsInline = true;
        this.video.muted = true;
        this.video.disablePictureInPicture = true;

        this.video.addEventListener("play", () => this._scanFrame());
        document.addEventListener("visibilitychange", () => {
            if (document.hidden) this.pause();
            else if (this.active) this.start();
        });

        this.qrEnginePromise = QrScanner.createQrEngine();
    }

    async start() {
        if (this.active || this.paused) return;
        this.active = true;
        this.paused = false;
        try {
            const { stream, facingMode } = await this._getCameraStream();
            this.video.srcObject = stream;
            await this.video.play();
        } catch (error) {
            console.error("QR Scanner start error:", error);
            this.active = false;
        }
    }

    stop() {
        this.pause(true);
        this.active = false;
    }

    async pause(stopStream = false) {
        this.paused = true;
        this.video.pause();
        if (stopStream) {
            if (this.video.srcObject instanceof MediaStream) {
                this.video.srcObject.getTracks().forEach((track) => track.stop());
                this.video.srcObject = null;
            }
        }
    }

    async _scanFrame() {
        if (!this.active || this.video.paused || this.video.ended) return;
        requestAnimationFrame(() => this._scanFrame());

        try {
            const scanResult = await QrScanner.scanImage(this.video);
            if (scanResult) {
                this.onDecode(scanResult);
                this.stop();
            }
        } catch (error) {
            if (error !== QrScanner.NO_QR_CODE_FOUND) {
                console.error("QR Scan error:", error);
            }
        }
    }

    async _getCameraStream() {
        if (!navigator.mediaDevices) throw "Camera not found.";
        const constraints = { video: { facingMode: "environment", width: { min: 640 } } };
        return { stream: await navigator.mediaDevices.getUserMedia(constraints) };
    }

    static async scanImage(image) {
        const qrEngine = await QrScanner.createQrEngine();
        return await qrEngine.detect(image);
    }

    static async createQrEngine() {
        if ("BarcodeDetector" in window) {
            return new BarcodeDetector({ formats: ["qr_code"] });
        } else {
            return import("./qr-scanner-worker.min.js").then((module) => module.createWorker());
        }
    }
}

QrScanner.NO_QR_CODE_FOUND = "No QR code found";
window.QrScanner = QrScanner;
